// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace Developist.Customers.Persistence.Migrations
{
    [DbContext(typeof(CustomersDbContext))]
    partial class CustomersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Developist.Customers.Domain.Model.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerNumber")
                        .IsUnique();

                    b.HasIndex("PaymentInformationId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Developist.Customers.Domain.Model.PaymentInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Developist.Customers.Domain.Model.BankPaymentInformation", b =>
                {
                    b.HasBaseType("Developist.Customers.Domain.Model.PaymentInformation");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.ToTable("BankPaymentInformation", null, t =>
                        {
                            t.HasCheckConstraint("CK_BankPaymentInformation_PaymentMethod", "[PaymentMethod] IN ('DirectDebit', 'Ideal')");
                        });
                });

            modelBuilder.Entity("Developist.Customers.Domain.Model.CashPaymentInformation", b =>
                {
                    b.HasBaseType("Developist.Customers.Domain.Model.PaymentInformation");

                    b.ToTable("CashPaymentInformation", t =>
                        {
                            t.HasCheckConstraint("CK_CashPaymentInformation_PaymentMethod", "[PaymentMethod] IN ('Cash', 'CashWithoutCosts')");
                        });
                });

            modelBuilder.Entity("Developist.Customers.Domain.Model.CreditCardPaymentInformation", b =>
                {
                    b.HasBaseType("Developist.Customers.Domain.Model.PaymentInformation");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("CreditCardPaymentInformation", t =>
                        {
                            t.HasCheckConstraint("CK_CreditCardPaymentInformation_PaymentMethod", "[PaymentMethod] IN ('CreditCard')");
                        });
                });

            modelBuilder.Entity("Developist.Customers.Domain.Model.Customer", b =>
                {
                    b.HasOne("Developist.Customers.Domain.Model.PaymentInformation", "PaymentInformation")
                        .WithMany()
                        .HasForeignKey("PaymentInformationId");

                    b.Navigation("PaymentInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
